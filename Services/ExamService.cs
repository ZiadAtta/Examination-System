using Examination_System.Repository;
using Examination_System.Models;
using Examination_System.ViewModels;
using Examination_System.Common;
using AutoMapper;
using Microsoft.EntityFrameworkCore;
using Examination_System.DTOS;

namespace Examination_System.Services
{
    public class ExamService
    {
        private readonly IMapper _mapper;
        private readonly IRepository<Exam> _repository;
        public ExamService(IMapper mapper)
        {
            _mapper = mapper;
            _repository = new Repository<Exam>();
        }

        public GeneralResponse<IEnumerable<ExamDTO>> Display()
        {
            var listExam = _repository.GetAll()
            .Include(x => x.ExamQuestions)
           .ThenInclude(eq => eq.Question)
             .ThenInclude(q => q.Choices)
            .Select(x => new ExamDTO
            {
                Title = x.Title,
                Description = x.Description,
                Type = x.Type,
                AvailableFrom = x.AvailableFrom,
                DurationInMinutes = x.DurationInMinutes,
                AvailableTo = x.AvailableTo,
                IsAutoGenerated = x.IsAutoGenerated,
                Questions = x.ExamQuestions != null
             ? x.ExamQuestions
                 .Where(eq => eq.Question != null)
                 .Select(eq => new QuestionDTO
                 {
                     Text = eq.Question.Text!,
                     Difficulty = (int)eq.Question.Difficulty,
                     InstructorId = eq.Question.InstructorId,
                     Choices = eq.Question.Choices != null
                         ? eq.Question.Choices
                             .Select(c => new ChoiceDTO(c.Text, c.IsCorrect))
                             .ToList()
                         : new List<ChoiceDTO>()
                 })
                 .ToList()
             : new List<QuestionDTO>()
            })
           .ToList();
            return GeneralResponse<IEnumerable<ExamDTO>>.Response(listExam, "The Data Returned Succeffully.", true);
        }
        public async Task<GeneralResponse<bool>> Create(CreateExamVM ExamVM)
        {
            try
            {
                var exam = _mapper.Map<Exam>(ExamVM);
                await _repository.AddAsync(exam);
                await _repository.SaveChangesAsync();
                return GeneralResponse<bool>.Response(true, "The Data Saved Correct.", true);
            }
            catch (Exception ex)
            {
                return GeneralResponse<bool>.Response(false, "The Is Internal Error. ", false, ErrorCode.InternalServerError.ToString() + "The Real Message" + ex.Message);
            }
        }

        public async Task<GeneralResponse<bool>> Update(UpdateExamVM examVM)
        {
            try
            {
                var exam = await _repository.GetByIdAsync(examVM.Id);
                exam.Title = examVM.Title;
                exam.Description = examVM.Description;
                exam.Type = examVM.Type;

                exam.AvailableFrom = examVM.AvailableFrom;

                exam.AvailableTo = examVM.AvailableTo;

                exam.DurationInMinutes = examVM.DurationInMinutes;

                exam.IsAutoGenerated = examVM.IsAutoGenerated;

                exam.CourseId = examVM.CourseId;

                exam.InstructorId = examVM.CourseId;



                await _repository.SaveIncludeAsync(exam, nameof(exam.Title),
                    nameof(exam.Description),
                    nameof(exam.Type),
                    nameof(exam.AvailableFrom),
                    nameof(exam.AvailableTo),
                    nameof(exam.DurationInMinutes),
                    nameof(exam.IsAutoGenerated),
                    nameof(exam.CourseId),
                    nameof(exam.InstructorId));
                await _repository.SaveChangesAsync();

                return GeneralResponse<bool>.Response(true, "The Data Saved Correct.", true);
            }
            catch (Exception ex)
            {
                return GeneralResponse<bool>.Response(false, "The Is Exception Error", false, ex.ToString());
            }
        }

        public async Task<GeneralResponse<bool>> Delete(int Id)
        {
            if (Id < 0)
            {
                return GeneralResponse<bool>.Response(false, "The Id Is Not Valid.");
            }
            try
            {
                var course = await _repository.GetAll().Where(x => x.Id == Id).AnyAsync();
                if (course)
                {
                    return GeneralResponse<bool>.Response(false, "The Id Is Not Valid.");
                }

                await _repository.SoftDeleteAsync(Id);
                await _repository.SaveChangesAsync();

                return GeneralResponse<bool>.Response(true, "The Data Deleted Succeffully.", true);
            }
            catch (Exception ex)
            {
                return GeneralResponse<bool>.Response(false, "The Is Exception Error", false, ex.ToString());
            }

        }
    }
}
