using Examination_System.Repository;
using Examination_System.Models;
using Examination_System.ViewModels;
using Examination_System.Common;
using AutoMapper;
using Microsoft.EntityFrameworkCore;
using Examination_System.DTOS;

namespace Examination_System.Services
{
    public class ExamService
    {
        private readonly IMapper _mapper;
        private readonly IRepository<Exam> _repository;
        private readonly IRepository<Student> _studentRepo;
        private readonly IRepository<StudentExam> _studentExamRepo;
        private readonly IRepository<Course> _courseRepo;
        public ExamService(IMapper mapper)
        {
            _mapper = mapper;
            _repository = new Repository<Exam>();
            _studentRepo = new Repository<Student>();
            _studentExamRepo = new Repository<StudentExam>();
            _courseRepo = new Repository<Course>();

        }

        public GeneralResponse<IEnumerable<ExamDTO>> Display()
        {
            try
            {
                var listExam = _repository.GetAll()
                .Include(x => x.ExamQuestions)
               .ThenInclude(eq => eq.Question)
                 .ThenInclude(q => q.Choices)
                .Select(x => new ExamDTO
                {
                    Title = x.Title,
                    Description = x.Description,
                    Type = x.Type,
                    AvailableFrom = x.AvailableFrom,
                    DurationInMinutes = x.DurationInMinutes,
                    AvailableTo = x.AvailableTo,
                    IsAutoGenerated = x.IsAutoGenerated,
                    Questions = x.ExamQuestions != null
                 ? x.ExamQuestions
                     .Where(eq => eq.Question != null)
                     .Select(eq => new QuestionDTO
                     {
                         Text = eq.Question.Text!,
                         Difficulty = (int)eq.Question.Difficulty,
                         InstructorId = eq.Question.InstructorId,
                         Choices = eq.Question.Choices != null
                             ? eq.Question.Choices
                                 .Select(c => new ChoiceDTO(c.Text, c.IsCorrect))
                                 .ToList()
                             : new List<ChoiceDTO>()
                     })
                     .ToList()
                 : new List<QuestionDTO>()
                })
               .ToList();
                return GeneralResponse<IEnumerable<ExamDTO>>.Response(listExam, "The Data Returned Succeffully.", true);
            }
            catch(Exception ex)
            {
                return GeneralResponse<IEnumerable<ExamDTO>>.Response(null, "An error occurred while retrieving the exams.", false, ex.Message);
            }
        }

        public async Task<GeneralResponse<ExamDTO>> TakeExam(StudentExamVM request)
        {
            try
            {
                // Check student
                bool studentExists = await _studentRepo.GetAll()
                    .AnyAsync(x => x.Id == request.StudentId);
                if (!studentExists)
                    return GeneralResponse<ExamDTO>.Response(null, "Student not found.", false, ErrorCode.NotFound.ToString());

                // Check exam
                var exam = await _repository.GetAll()
                    .Include(x => x.ExamQuestions)
                        .ThenInclude(eq => eq.Question)
                            .ThenInclude(q => q.Choices)
                    .FirstOrDefaultAsync(x => x.Id == request.ExamId);
                if (exam == null)
                    return GeneralResponse<ExamDTO>.Response(null, "Exam not found.", false, ErrorCode.NotFound.ToString());

                // Check course
                bool courseExists = await _courseRepo.GetAll()
                    .AnyAsync(x => x.Id == request.CourseId);
                if (!courseExists)
                    return GeneralResponse<ExamDTO>.Response(null, "Course not found.", false, ErrorCode.NotFound.ToString());

                // Check course match
                if (exam.CourseId != request.CourseId)
                    return GeneralResponse<ExamDTO>.Response(null, "Exam does not belong to this course.", false, ErrorCode.Invalide.ToString());

                // Check duplication
                bool studentExamExists = await _studentExamRepo.GetAll()
                    .AnyAsync(x => x.ExamId == request.ExamId && x.StudentId == request.StudentId);
                if (studentExamExists)
                    return GeneralResponse<ExamDTO>.Response(null, "Student already took the exam.", false, ErrorCode.Invalide.ToString());

                // Map to DTO
                var examDto = new ExamDTO
                {
                    Title = exam.Title,
                    Description = exam.Description,
                    Type = exam.Type,
                    AvailableFrom = exam.AvailableFrom,
                    AvailableTo = exam.AvailableTo,
                    DurationInMinutes = exam.DurationInMinutes,
                    IsAutoGenerated = exam.IsAutoGenerated,
                    Questions = exam.ExamQuestions
                        .Where(eq => eq.Question != null)
                        .Select(eq => new QuestionDTO
                        {
                            Text = eq.Question.Text!,
                            Difficulty = (int)eq.Question.Difficulty,
                            InstructorId = eq.Question.InstructorId,
                            Choices = eq.Question.Choices?
                                .Select(c => new ChoiceDTO(c.Text, c.IsCorrect))
                                .ToList() ?? new List<ChoiceDTO>()
                        }).ToList()
                };

                return GeneralResponse<ExamDTO>.Response(examDto, "The Exam Retrieved Successfully.", true);
            }
            catch (Exception ex)
            {
                return GeneralResponse<ExamDTO>.Response(null, "An error occurred while retrieving the exam.", false, ex.Message);
            }
        }

        public async Task<GeneralResponse<ExamResultDTO>> SubmitExamAsync(SubmitExamVM request)
        {
            try
            {
                var exam = await _repository.GetAll()
                    .Include(e => e.ExamQuestions)
                        .ThenInclude(eq => eq.Question)
                            .ThenInclude(q => q.Choices)
                    .FirstOrDefaultAsync(e => e.Id == request.ExamId);

                if (exam == null)
                    return GeneralResponse<ExamResultDTO>.Response(null, "Exam not found", false, ErrorCode.NotFound.ToString());

                int total = exam.ExamQuestions.Count;
                int correct = 0;

                var studentExam = new StudentExam
                {
                    StudentId = request.StudentId,
                    ExamId = request.ExamId,
                    SubmissionTime = DateTime.UtcNow,
                    Answers = new List<StudentAnswer>()
                };

                foreach (var ans in request.Answers)
                {
                    var question = exam.ExamQuestions.FirstOrDefault(q => q.QuestionId == ans.QuestionId)?.Question;

                    if (question == null) continue;

                    var selectedChoice = question.Choices?.FirstOrDefault(c => c.Id == ans.ChoiceId);

                    bool isCorrect = selectedChoice?.IsCorrect == true;
                    if (isCorrect) correct++;

                    studentExam.Answers.Add(new StudentAnswer
                    {
                        QuestionId = ans.QuestionId,
                        ChoiceId = ans.ChoiceId
                    });
                }

                studentExam.Score = correct;

                await _studentExamRepo.AddAsync(studentExam);
                await _studentExamRepo.SaveChangesAsync();

                return GeneralResponse<ExamResultDTO>.Response(new ExamResultDTO
                {
                    CorrectAnswers = correct,
                    TotalQuestions = total
                }, "Exam submitted successfully", true);
            }
            catch (Exception ex)
            {
                return GeneralResponse<ExamResultDTO>.Response(null, "Error submitting exam", false, ex.Message);
            }
        }


        public async Task<GeneralResponse<bool>> Create(CreateExamVM ExamVM)
        {
            try
            {
                var exam = _mapper.Map<Exam>(ExamVM);
                await _repository.AddAsync(exam);
                await _repository.SaveChangesAsync();
                return GeneralResponse<bool>.Response(true, "The Data Saved Correct.", true);
            }
            catch (Exception ex)
            {
                return GeneralResponse<bool>.Response(false, "The Is Internal Error. ", false, ErrorCode.InternalServerError.ToString() + "The Real Message" + ex.Message);
            }
        }

        public async Task<GeneralResponse<bool>> Update(UpdateExamVM examVM)
        {
            try
            {
                var exam = await _repository.GetByIdAsync(examVM.Id);
                exam.Title = examVM.Title;
                exam.Description = examVM.Description;
                exam.Type = examVM.Type;

                exam.AvailableFrom = examVM.AvailableFrom;

                exam.AvailableTo = examVM.AvailableTo;

                exam.DurationInMinutes = examVM.DurationInMinutes;

                exam.IsAutoGenerated = examVM.IsAutoGenerated;

                exam.CourseId = examVM.CourseId;

                exam.InstructorId = examVM.CourseId;



                await _repository.SaveIncludeAsync(exam, nameof(exam.Title),
                    nameof(exam.Description),
                    nameof(exam.Type),
                    nameof(exam.AvailableFrom),
                    nameof(exam.AvailableTo),
                    nameof(exam.DurationInMinutes),
                    nameof(exam.IsAutoGenerated),
                    nameof(exam.CourseId),
                    nameof(exam.InstructorId));
                await _repository.SaveChangesAsync();

                return GeneralResponse<bool>.Response(true, "The Data Saved Correct.", true);
            }
            catch (Exception ex)
            {
                return GeneralResponse<bool>.Response(false, "The Is Exception Error", false, ex.ToString());
            }
        }

        public async Task<GeneralResponse<bool>> Delete(int Id)
        {
            if (Id < 0)
            {
                return GeneralResponse<bool>.Response(false, "The Id Is Not Valid.");
            }
            try
            {
                var course = await _repository.GetAll().Where(x => x.Id == Id).AnyAsync();
                if (course)
                {
                    return GeneralResponse<bool>.Response(false, "The Id Is Not Valid.");
                }

                await _repository.SoftDeleteAsync(Id);
                await _repository.SaveChangesAsync();

                return GeneralResponse<bool>.Response(true, "The Data Deleted Succeffully.", true);
            }
            catch (Exception ex)
            {
                return GeneralResponse<bool>.Response(false, "The Is Exception Error", false, ex.ToString());
            }

        }



        
    }
}
